@page "/tracelog"
@using System.Diagnostics;
@inject NavigationManager NavigationManager

<PageTitle>Tracelog 分析工具</PageTitle>

<h1>Tracelog 分析工具</h1>


<div>
    上传kernel event trace 文件 要求后缀名以 .kev结尾
    <InputFile OnChange="OnChange" class="form-control" multiple accept=".kev" />
</div>


<p>Upload file: @progress%</p>


<TableTemplate Items="log_files" Context="item_file">
    <TableHeader>
        <th>File</th>
        <th>Link</th>
    </TableHeader>
    <RowTemplate>
        <td>@item_file.Name</td>

        <td>
            <NavLink class="nav-link" href=@($"{item_file.FilePath}/{item_file.ReportFile}") target="_blank">
                @item_file.ReportFile
            </NavLink>
        </td>
    </RowTemplate>
</TableTemplate>

<p>上传kev文件完成后，请耐心等待云桌面自动化处理导出CSV 直到上文出现CSV文件下载链接...</p>
<p>如遇到QDE报错 请点击 “打开标签页” 进入云桌面手动操作...</p>


<div style="padding-top:30px">
    <a class="btn btn-primary" href=@(NavigationManager.BaseUri.Replace("5000", "3000")) target="_blank">
        <span class="oi oi-file" aria-hidden="true"></span> 标签页打开
    </a>
</div>
<embed type="text/x-scriptlet" src=@(NavigationManager.BaseUri.Replace("5000", "3000")) width="1280" height="720" style="pointer-events: none;">

@code {
    [Inject] protected Microsoft.AspNetCore.Hosting.IWebHostEnvironment? HostEnvironment { get; set; } //获取IWebHostEnvironment

    const long MAX_FILE_SIZE = 4294967296;
    private int progress = 0;
    protected string UploadPath = "";
    protected string? uploadstatus;
    private List<LogFileInfo> log_files = new List<LogFileInfo>();

    private class LogFileInfo
    {
        public string? Name { get; set; }
        public string? FilePath { get; set; }
        public string? ReportFile { get; set; }
    }

    protected override void OnAfterRender(bool firstRender)
    {
        if (!firstRender) return;
        UploadPath = Path.Combine(HostEnvironment!.WebRootPath, "Upload"); //初始化上传路径
        if (!Directory.Exists(UploadPath)) Directory.CreateDirectory(UploadPath); //不存在则新建目录
    }

    protected async Task OnChange(InputFileChangeEventArgs e)
    {
        int i = 0;
        var selectedFiles = e.GetMultipleFiles(100);
        foreach (var item in selectedFiles)
        {
            i++;
            await OnSubmit(item);
        }
    }

    protected async Task CreateSoftLink(string srcPath, string linkPath)
    {
        if (!Directory.Exists(linkPath))
        {
            ////create softlink
            var softlink_psi = new ProcessStartInfo("ln", $"-s {srcPath} {linkPath}")
                {
                    RedirectStandardOutput = true,
                    RedirectStandardError = true,
                    WorkingDirectory = UploadPath
                };
            var softlink_proc = Process.Start(softlink_psi);
            if (softlink_proc != null)
            {
                await softlink_proc.WaitForExitAsync();
                softlink_proc.Close();
            }
        }
    }

    protected async Task OnSubmit(IBrowserFile efile)
    {
        if (efile == null) return;
        var logPath = Path.Combine(UploadPath,"tracelog");
        await CreateSoftLink(Path.Combine(Environment.GetFolderPath(Environment.SpecialFolder.UserProfile),"ide-7.1-workspace/tracelog"), logPath);

        logPath = Path.Combine(logPath, DateTime.Now.ToString("yyyyMMddHHmmss"));
        if (!Directory.Exists(logPath)) Directory.CreateDirectory(logPath); //不存在则新建目录

        var tempfilename = Path.Combine(logPath, efile.Name);
        await using FileStream fs = new(tempfilename, FileMode.Create);
        using var stream = efile.OpenReadStream(MAX_FILE_SIZE);
        //await stream.CopyToAsync(fs);

        int count = 0;
        int totalCount = 0;
        var buffer = new byte[2048];

        while ((count = await stream.ReadAsync(buffer, 0, buffer.Length)) != 0)
        {
            await fs.WriteAsync(buffer, 0, count);
            totalCount += count;
            progress = (int)(totalCount * 100.0 / stream.Length);
            StateHasChanged();
        }

        stream.Close();
        fs.Close();

        ////run python scripts
        var psi = new ProcessStartInfo("python3", $"{HostEnvironment!.WebRootPath}/analysis_kev/analysis_kev.py {tempfilename}")
            {
                RedirectStandardOutput = true,
                RedirectStandardError = true,
                WorkingDirectory = Path.Combine(HostEnvironment!.WebRootPath, "analysis_kev/")
            };
        var proc = Process.Start(psi);
        if (proc != null)
        {
            proc.BeginErrorReadLine();
            proc.BeginOutputReadLine();
            await proc.WaitForExitAsync();
            proc.Close();
            log_files.Add(new LogFileInfo
                {
                    Name = efile.Name,
                    FilePath = logPath.Replace(HostEnvironment!.WebRootPath, ""),
                    ReportFile = efile.Name.Replace("kev", "csv")
                });
            StateHasChanged();
        }
    }

    private static void CopyFolder(string sourceFolder, string destFolder)
    {
        if (!Directory.Exists(destFolder)) Directory.CreateDirectory(destFolder); //不存在则新建目录

        //得到原文件根目录下的所有文件
        string[] files = Directory.GetFiles(sourceFolder);
        foreach (string file in files)
        {
            string name = Path.GetFileName(file);
            string dest = Path.Combine(destFolder, name);
            // 复制文件
            File.Copy(file, dest);
        }
        //得到原文件根目录下的所有文件夹
        string[] folders = Directory.GetDirectories(sourceFolder);
        foreach (string folder in folders)
        {
            string dirName = folder.Split('\\')[folder.Split('\\').Length - 1];
            string destfolder = Path.Combine(destFolder, dirName);
            // 递归调用
            CopyFolder(folder, destfolder);
        }
    }
}